package com.service.kafka.service.impl;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.service.kafka.config.KafkaConfig;
import com.service.kafka.entity.PurchaseOrderEntity;
import com.service.kafka.model.PurchaseOrder;

@Service
public class PurchaseOrderProducer {

	@Autowired
	private KafkaTemplate<String, Object> kafkaTemplate;

	@Autowired
	private KafkaConfig kafkaConfig;

	ObjectMapper objectMapper = new ObjectMapper();

	public void producer(PurchaseOrder purchaseOrder) {

		try {
			String message = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(purchaseOrder);
			kafkaTemplate.send(kafkaConfig.getPoTopicName(), message).get();
		} catch (InterruptedException | ExecutionException | JsonProcessingException e) {
			e.printStackTrace();
		}
	}
	
	
	public String publishBulkPO(MultipartFile file) {
		
		try (BufferedReader reader = new BufferedReader(new InputStreamReader(file.getInputStream()))) {
			Iterable<CSVRecord> records = CSVFormat.DEFAULT.withFirstRecordAsHeader().parse(reader);
			for (CSVRecord record : records) {
				PurchaseOrder purchaseOrder = new PurchaseOrder();
	        	purchaseOrder.setPoNumber(Integer.parseInt(record.get("Column1")));
	        	purchaseOrder.setDcNumber(record.get("Column2"));
	        	purchaseOrder.setPoStatus(record.get("Column2"));
				System.out.println("Record: " + record);
				String message = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(purchaseOrder);
				try {
					kafkaTemplate.send(kafkaConfig.getPoTopicName(), message).get();
				} catch (InterruptedException | ExecutionException e) {
					e.printStackTrace();
				}
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return "File uploaded and processed successfully.";
		
	}
	
	private void saveCSVData(Iterable<CSVRecord> records) {
        List<PurchaseOrder> purchaseOrderEntity = new ArrayList();
		purchaseOrderRepo.save(purchaseOrderEntity);
        for (CSVRecord record : records) {
        	
        	purchaseOrder.add(entity);
        }
        repository.saveAll(entities);
    }

}
