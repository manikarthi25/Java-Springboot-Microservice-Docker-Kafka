package com.microservice.customer.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.circuitbreaker.CircuitBreaker;
import org.springframework.cloud.client.circuitbreaker.CircuitBreakerFactory;
import org.springframework.stereotype.Service;

import com.microservice.customer.dto.Customer;
import com.microservice.customer.dto.Order;
import com.microservice.customer.entity.CustomerEntity;
import com.microservice.customer.feign.OrderFeignClient;
import com.microservice.customer.mapper.ModelMapperUtil;
import com.microservice.customer.repo.CustomerRepo;
import com.microservice.customer.service.CustomerService;

@Service
public class CustomerServiceImpl implements CustomerService {

	@Autowired
	private CustomerRepo customerRepo;

	@Autowired
	private OrderFeignClient orderFeignClient;

	@Autowired
	private CircuitBreakerFactory circuitBreakerFactory;

	ModelMapperUtil modelMapperUtil = new ModelMapperUtil();

	@Override
	public Customer addCustomer(Customer customer) {
		CustomerEntity customerEntity = customerRepo.save(modelMapperUtil.convertToEntity(customer));
		return modelMapperUtil.convertToDTO(customerEntity);
	}

	@Override
	public List<Customer> getAllCustomer() {
		List<Customer> customerList = new ArrayList<>();
		List<CustomerEntity> customerEntityList = customerRepo.findAll();
		customerEntityList.forEach(customerEntity -> {
			customerList.add(modelMapperUtil.convertToDTO(customerEntity));
		});
		return customerList;
	}

	@Override
	public Customer updateCustomer(Customer customer) {
		Optional<CustomerEntity> customerEntityOptional = customerRepo.findById(customer.getCustomerId());
		if (customerEntityOptional.isPresent()) {
			CustomerEntity customerEntity = customerRepo.saveAndFlush(modelMapperUtil.convertToEntity(customer));
			return modelMapperUtil.convertToDTO(customerEntity);
		}
		return null;
	}

	@Override
	public void deleteCustomer(Customer customer) {
		customerRepo.delete(modelMapperUtil.convertToEntity(customer));
	}

	@Override
	public Customer getCustomerByCustomerId(Integer customerId) {
		Optional<CustomerEntity> customerEntityOptional = customerRepo.findById(customerId);
		if (customerEntityOptional.isPresent()) {
			return modelMapperUtil.convertToDTO(customerEntityOptional.get());
		}
		return null;
	}

	@Override
	public Order getOrderByCustomerId(Integer customerId) {
		Optional<CustomerEntity> customerEntityOptional = customerRepo.findById(customerId);
		if (customerEntityOptional.isPresent()) {
			CircuitBreaker circuitBreaker = circuitBreakerFactory.create("getOrder");
			return circuitBreaker.run(() -> orderFeignClient.getOrderByOrderId(orderId).getBody(),
					Throwable -> getDefaultMessage(orderId));
		}
		return null;
	}

	private Order getDefaultMessage(Integer customerId) {
		return null;
	}

}
